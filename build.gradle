buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.0.+', changing: true
        classpath 'org.ajoberstar:gradle-git:0.10.1'
    }
}
plugins {
    id 'maven-publish'
    id 'eclipse'
    id 'io.freefair.lombok' version '4.1.5'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

import org.ajoberstar.grgit.Grgit

// We use these to mess with the eclipse .classpath file
import org.gradle.plugins.ide.eclipse.model.AbstractClasspathEntry
import org.gradle.plugins.ide.eclipse.model.ProjectDependency

def repo = Grgit.open(project.file('.'))
project.ext.gitHash = repo.log().find().abbreviatedId

boolean dev = System.getenv('RELEASE') == null || System.getenv('RELEASE').equals('false');

ext.buildnumber = 0
project.buildnumber = System.getenv('BUILD_NUMBER') != null ? System.getenv('BUILD_NUMBER') : project.ext.gitHash

version = "MC${minecraft_version}-${mod_version}.${buildnumber}"

allprojects {

    apply plugin: 'maven-publish'

    repositories {
        maven { // CTM
            url "http://maven.tterrag.com/"
        }
        maven { // JEI
            url "http://dvs1.progwml6.com/files/maven"
        }
        maven { // Hwyla
            url "http://maven.tehnut.info/"
        }
    }
    
    configurations {
        shade
    }

    publishing {    
        repositories {
            if (project.hasProperty('mavendir')) {
                maven { url mavendir }
            }
        }
    }
}
    
String getChangelogText() {
    def changelogFile = file('changelog.txt')
    String str = ''
    int lineCount = 0
    boolean done = false
    changelogFile.eachLine {
        if (done || it == null) {
            return
        }
        if (it.size() > 1) {
            def temp = it
            if (lineCount == 0) {
                temp = "Chisel ${version}"
                temp = "<h2>$temp</h2>"
            } else if (it.startsWith('-')) {
                temp = "&nbsp;&nbsp;&nbsp;$temp"
                temp = temp.replaceAll("(\\S+\\/\\S+)#([0-9]+)\\b", "<a href=\"https://github.com/\$1/issues/\$2\">\$0</a>");
                temp = temp.replaceAll("#([0-9]+)\\b(?!<\\/a>)", "<a href=\"https://github.com/$github_project/issues/\$1\">\$0</a>");
            } else {
                temp = "<h4>$temp</h4>"
            }
            str += "$temp<br/>"
            lineCount++
            return
        } else {
            done = true
        }
    }
    return str
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'net.minecraftforge.gradle'
    apply plugin: 'eclipse'
    apply plugin: 'io.freefair.lombok'
    apply plugin: 'com.matthewprenger.cursegradle'
    apply plugin: 'com.github.johnrengelman.shadow'

    group = "team.chisel" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
    archivesBaseName = (dev ? 'Chisel_DEV' : 'Chisel') + (project.name.equals('base') ? '' : '-' + project.name)
    version = rootProject.version
        
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    sourceSets.main.resources {
        srcDir 'src/generated/resources'
    }
    
    minecraft {
        mappings channel: 'snapshot', version: '20201028-1.16.3'
    
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    }

    dependencies {
        minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

        implementation fg.deobf("team.chisel.ctm:CTM:MC1.16.1-${ctm_version}")
        implementation "mcp.mobius.waila:Hwyla:${hwyla_version}:api"
    
        compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
        runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")
        
        def registrate = "com.tterrag.registrate:Registrate:MC1.16.2-${registrate_version}"
        implementation fg.deobf(registrate)
        shade registrate
    
    //  deobfCompile "com.wayoftime.bloodmagic:BloodMagic:${bm_version}:api"
    }
    
    eclipse {
      classpath {
        containers 'org.eclipse.buildship.core.gradleclasspathcontainer'
        file {
          whenMerged {
            entries.add(new ProjectDependency("/ConnectedTexturesMod"))
          }
        }
      }
    }
    
    jar {
        classifier = 'slim'
    
        manifest {
            attributes(["Specification-Title": "chisel",
                        "Specification-Vendor": "tterrag",
                        "Specification-Version": "1.0",
                        "Implementation-Title": project.name,
                        "Implementation-Version": "${version}",
                        "Implementation-Vendor" :"tterrag",
                        "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
        }
    }
    
    shadowJar {
        configurations = [project.configurations.shade]
        relocate 'com.tterrag.registrate', 'team.chisel.repack.registrate'
        classifier = ''
    }
    
    reobf {
        shadowJar {}
    }
    
    build.dependsOn shadowJar
    build.dependsOn reobfShadowJar
    
    lombok {
        version = "1.18.12"
    }
    
    // Add external annotations
    /*eclipse.classpath.file {
        withXml {
            def node = it.asNode()
            node.get('classpathentry').each {
                // Allow external annotations on Minecraft/Forge and JRE
                if (it.attribute('path').contains('forgeSrc') || it.attribute('path').contains('JRE_CONTAINER')) {
                    it.appendNode('attributes').appendNode('attribute', [name: 'annotationpath', value: '/Chisel/externalannotations/'])
                }
            }
        }
    }*/

    publishing {
        tasks.publish.dependsOn 'build'
        publications {
            mavenJava(MavenPublication) {
                artifact jar
            }
        }
    }
    
    tasks.curseforge.enabled = !dev && project.hasProperty('curseforge_key')
        
    curseforge {
        if (project.hasProperty('curseforge_key')) {
            apiKey = project.curseforge_key
        }
    
        project {
            id = project.projectId
            changelog = System.getenv('CHANGELOG') == null || System.getenv('CHANGELOG').equals('none') ? getChangelogText() : System.getenv('CHANGELOG')
            changelogType = 'html'
            releaseType = project.curse_type
            addGameVersion '1.12.2'
            mainArtifact(jar) {
                displayName = "Chisel - ${version}"
            }
            relations {
                requiredLibrary 'ctm'
            }
        }
    }
}

// Copy all the subproject jars to build/libs
task build(type: Copy, dependsOn: subprojects.tasks['build']) {
    from subprojects.collect { it.tasks.withType(Jar) }
    into "$buildDir/libs"
}